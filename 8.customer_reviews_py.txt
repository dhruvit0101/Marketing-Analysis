import pandas as pd
import pyodbc

conn_str = (
        "Driver={SQL Server};"
        "Server=DESKTOP-U9CSI9F\\SQLEXPRESS;"
        "Database=PortfolioProject_MarketingAnalytics;"
        "Trusted_Connection=yes;"
)

conn = pyodbc.connect(conn_str)
query = "SELECT ReviewID, CustomerID, ProductID, ReviewDate, Rating, ReviewText FROM dbo.customer_reviews"

df = pd.read_sql(query, conn)
conn.close()

df.head()

df.dtypes

df.info()

df.describe()

df.duplicated().sum()

df.isnull().sum()


import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

sia = SentimentIntensityAnalyzer()

df.head()

# 1. Calculate sentiment score
def calculate_sentiment(review):
    sentiment = sia.polarity_scores(str(review))
    return sentiment['compound']


# 2. Categorize sentiment using score + rating
def categorize_sentiment(score, rating):
    if score > 0.05:
        if rating >= 4:
            return 'Positive'
        elif rating == 3:
            return 'Mixed Positive'
        else:
            return 'Mixed Negative'
    elif score < -0.05:
        if rating <= 2:
            return 'Negative'
        elif rating == 3:
            return 'Mixed Negative'
        else:
            return 'Mixed Positive'
    else:
        if rating >= 4:
            return 'Positive'
        elif rating <= 2:
            return 'Negative'
        else:
            return 'Neutral'


# 3. Bucket sentiment score
def sentiment_bucket(score):
    if score >= 0.5:
        return '0.5 to 1.0'
    elif 0.0 <= score < 0.5:
        return '0.0 to 0.49'
    elif -0.5 <= score < 0.0:
        return '-0.49 to 0.0'
    else:
        return '-1.0 to -0.5'


df['SentimentScore'] = df['ReviewText'].apply(calculate_sentiment)
df['SentimentCategory'] = df.apply(lambda row: categorize_sentiment(row['SentimentScore'], row['Rating']), axis=1)
df['SentimentBucket'] = df['SentimentScore'].apply(sentiment_bucket)

# Show the results
df.head()


df.to_csv('customer_reviews_sentiment.csv', index=False)
